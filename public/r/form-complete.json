{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-complete",
  "type": "registry:component",
  "title": "Complete Form",
  "description": "A comprehensive form with various input types, react-hook-form, Zod validation, and toast notifications.",
  "dependencies": [
    "zod",
    "react-hook-form",
    "@hookform/resolvers",
    "date-fns",
    "lucide-react",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "card",
    "form",
    "calendar",
    "popover",
    "select"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/form-complete/form-complete.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Calendar } from \"@/registry/new-york/ui/calendar\";\nimport {\n\tCard,\n\tCardContent,\n\tCardDescription,\n\tCardFooter,\n\tCardHeader,\n\tCardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n\tForm,\n\tFormControl,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/registry/new-york/ui/select\";\n\n// Zod Schema\nconst formSchema = z\n\t.object({\n\t\tusername: z.string().min(2, {\n\t\t\tmessage: \"Username must be at least 2 characters.\",\n\t\t}),\n\t\temail: z.string().email({\n\t\t\tmessage: \"Please enter a valid email address.\",\n\t\t}),\n\t\tquantity: z.coerce\n\t\t\t.number({\n\t\t\t\trequired_error: \"Quantity is required\",\n\t\t\t\tinvalid_type_error: \"Quantity must be a number\",\n\t\t\t})\n\t\t\t.min(1, { message: \"Quantity must be at least 1.\" })\n\t\t\t.positive({ message: \"Quantity must be a positive number.\" }),\n\t\tdob: z.date({\n\t\t\trequired_error: \"A date of birth is required.\",\n\t\t}),\n\t\tcategory: z.enum([\"category1\", \"category2\", \"category3\"], {\n\t\t\trequired_error: \"Please select a category.\",\n\t\t}),\n\t\tpassword: z.string().min(8, {\n\t\t\tmessage: \"Password must be at least 8 characters.\",\n\t\t}),\n\t\tconfirmPassword: z.string().min(8, {\n\t\t\tmessage: \"Confirm Password must be at least 8 characters.\",\n\t\t}),\n\t})\n\t.refine((data) => data.password === data.confirmPassword, {\n\t\tmessage: \"Passwords don't match.\",\n\t\tpath: [\"confirmPassword\"], // path of error\n\t});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface FormCompleteProps {\n\tonFormSubmit: (data: FormValues) => Promise<any>;\n\tonCancel?: () => void;\n\tdefaultValues?: Partial<FormValues>;\n}\n\nexport function FormComplete({\n\tonFormSubmit,\n\tonCancel,\n\tdefaultValues,\n}: FormCompleteProps) {\n\tconst form = useForm<FormValues>({\n\t\tresolver: zodResolver(formSchema),\n\t\tdefaultValues: {\n\t\t\tusername: \"\",\n\t\t\temail: \"\",\n\t\t\tquantity: 1,\n\t\t\tcategory: undefined,\n\t\t\tpassword: \"\",\n\t\t\tconfirmPassword: \"\",\n\t\t\t...defaultValues,\n\t\t},\n\t});\n\n\tconst [isSubmitting, setIsSubmitting] = React.useState(false);\n\n\tasync function onSubmit(data: FormValues) {\n\t\tsetIsSubmitting(true);\n\t\ttry {\n\t\t\tawait onFormSubmit(data);\n\t\t\ttoast.success(\"Form submitted successfully!\");\n\t\t\tform.reset(); // Optionally reset form on success\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Submission error:\", error);\n\t\t\ttoast.error(\n\t\t\t\terror instanceof Error ? error.message : \"An unexpected error occurred.\"\n\t\t\t);\n\t\t} finally {\n\t\t\tsetIsSubmitting(false);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Card className=\"w-full max-w-2xl\">\n\t\t\t<CardHeader>\n\t\t\t\t<CardTitle>Complete Form</CardTitle>\n\t\t\t\t<CardDescription>\n\t\t\t\t\tFill out the details below. All fields are required.\n\t\t\t\t</CardDescription>\n\t\t\t</CardHeader>\n\t\t\t<Form {...form}>\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={form.handleSubmit(onSubmit)}\n\t\t\t\t>\n\t\t\t\t\t<CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n\t\t\t\t\t\t{/* Username */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel>Username</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Input placeholder=\"yourusername\" {...field} />\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Email */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel>Email</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"user@example.com\"\n\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Quantity */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"quantity\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel>Quantity</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.onChange(e.target.valueAsNumber)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Date of Birth */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"dob\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<FormLabel>Date of birth</FormLabel>\n\t\t\t\t\t\t\t\t\t<Popover>\n\t\t\t\t\t\t\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={\"outline\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"w-full pl-3 text-left font-normal\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t!field.value && \"text-muted-foreground\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{field.value ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tformat(field.value, \"PPP\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>Pick a date</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t\t\t\t\t\t<PopoverContent className=\"w-auto p-0\" align=\"start\">\n\t\t\t\t\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\t\t\t\t\tselected={field.value}\n\t\t\t\t\t\t\t\t\t\t\t\tonSelect={field.onChange}\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={(date) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tdate > new Date() || date < new Date(\"1900-01-01\")\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tinitialFocus\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</PopoverContent>\n\t\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Category Select */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"category\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel>Category</FormLabel>\n\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\tonValueChange={field.onChange}\n\t\t\t\t\t\t\t\t\t\tdefaultValue={field.value}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t\t<SelectTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t<SelectValue placeholder=\"Select a category\" />\n\t\t\t\t\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"category1\">Category 1</SelectItem>\n\t\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"category2\">Category 2</SelectItem>\n\t\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"category3\">Category 3</SelectItem>\n\t\t\t\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Spacer for layout on smaller screens, can be removed if not desired */}\n\t\t\t\t\t\t<div className=\"hidden md:block\"></div>\n\n\t\t\t\t\t\t{/* Password */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel>Password</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"password\" placeholder=\"********\" {...field} />\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Confirm Password */}\n\t\t\t\t\t\t<FormField\n\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\tname=\"confirmPassword\"\n\t\t\t\t\t\t\trender={({ field }) => (\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<FormLabel>Confirm Password</FormLabel>\n\t\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"password\" placeholder=\"********\" {...field} />\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CardContent>\n\t\t\t\t\t<CardFooter className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t{onCancel && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\tonClick={onCancel}\n\t\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isSubmitting || !form.formState.isValid}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isSubmitting ? \"Submitting...\" : \"Submit\"}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t</form>\n\t\t\t</Form>\n\t\t</Card>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/form-complete/page.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { FormComplete } from \"@/registry/new-york/blocks/form-complete/form-complete\";\nimport { Toaster } from \"@/registry/new-york/ui/sonner\"; // Ensure this path is correct\n\n// Simulate a delay for API calls\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport default function FormCompletePage() {\n\tconst handleFormSubmit = async (data: any) => {\n\t\tconsole.log(\"Form data submitted:\", data);\n\t\t// Simulate API call\n\t\tawait sleep(1000);\n\n\t\t// Example of throwing an error to test catch block and error toast\n\t\t// if (data.username === \"error\") G{\n\t\t//   throw new Error(\"Simulated server error!\")\n\t\t// }\n\n\t\t// Simulate a successful submission\n\t\treturn { success: true, message: \"Data processed successfully.\" };\n\t};\n\n\tconst handleCancel = () => {\n\t\tconsole.log(\"Form cancelled\");\n\t\talert(\"Form cancelled by user.\"); // Or use a toast for cancellation feedback\n\t};\n\n\treturn (\n\t\t<div className=\"container mx-auto p-4 md:p-8 flex flex-col items-center\">\n\t\t\t<h1 className=\"text-3xl font-bold mb-8\">Advanced Form Example</h1>\n\t\t\t<FormComplete\n\t\t\t\tonFormSubmit={handleFormSubmit}\n\t\t\t\tonCancel={handleCancel}\n\t\t\t\tdefaultValues={{\n\t\t\t\t\tusername: \"testuser\",\n\t\t\t\t\temail: \"test@example.com\",\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Toaster richColors position=\"top-right\" />\n\t\t</div>\n\t);\n}\n",
      "type": "registry:page",
      "target": "app/form-complete-example/page.tsx"
    }
  ]
}